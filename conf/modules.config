/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    withName: 'MOSDEPTH' {
        cpus = 4
        memory = { 4.GB * task.attempt }
        // filter reads with flag 1804
        //     read unmapped (0x4)
        //     mate unmapped (0x8)*
        //     not primary alignment (0x100)
        //     read fails platform/vendor quality checks (0x200)
        //     read is PCR or optical duplicate (0x400)
        // filter reads with MAPQ < 1
        // quantize coverage to 4 bins
        ext.args = [
            "--flag 1804",
            "--mapq 1",
            "--quantize 0:1:4:"
        ].join(" ").trim()
    }

    /*
    CNV_EXOMEDEPTH
    */

    withName: 'BEDTOOLS_MAP' {
        ext.args = {[
            '-c 4',
            '-o mean',
        ].join(' ').trim()}
        ext.prefix = { "${meta.id}.${meta.chromosome}" }
    }

    withName: 'CUSTOM_MERGECOUNTS' {
        ext.prefix = { "${meta.id}.${meta.chromosome}" }
        publishDir = [
            path:"$params.outdir/exomedepth/counts",
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'EXOMEDEPTH_CALL' {
        ext.prefix = { "${meta.id}.${meta.chromosome}" }
    }

    /*
    POSTPROCESSING
    */

    withName: 'CUSTOM_MERGECNV' {
        publishDir = [
            path:"$params.outdir/exomedepth/cnv_call",
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'BEDGOVCF' {
        ext.args = { "--skip 1" }
    }

    withName: 'BCFTOOLS_SORT' {
        ext.args = {[
            '--output-type z',
            '--write-index=tbi'
        ].join(' ').trim()}
        ext.prefix = { "${meta.id}.sorted" }
        publishDir = [
            path: {"$params.outdir/exomedepth/cnv_call"},
            pattern: "*vcf*",
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.replace(".sorted", "")}
        ]
    }

    withName: 'ENSEMBLVEP_VEP' {
        ext.prefix = {"${meta.id}.vep"}
        ext.args = {[
            '--vcf',
            '--format vcf',
            '--coding_only',
            '--offline',
            '--no_stats',
            '--per_gene',
            '--merged',
            '--exclude_predicted',
            '--fields "SYMBOL,Gene"',
            '--transcript_filter "stable_id match ENST"'
        ].join(' ').trim()}
        publishDir = [
            path: {"$params.outdir/exomedepth/cnv_call_vep"},
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'TABIX_VEP' {
        publishDir = [
            path: {"$params.outdir/exomedepth/cnv_call_vep"},
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MULTIQC' {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'CUSTOM_REFORMATCOUNTS' {
        ext.prefix = { "${meta.id}.${meta.chromosome}" }
    }

}
